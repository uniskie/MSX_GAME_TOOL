;=== SUPER LAYDOCK LOADER ===
;
 NAME S-L
;
; FILE LAY-DEF   ; public addres
_LAYHEAD EQU 0F935H
SCCWORK EQU 0FB40H ; PLYCNT
SCCWKSZ EQU 110 ; PLYCNT->110bytes
_OPTION EQU 0C800H
;
 FILE LAY-OPTI
 FILE LAY-SUBR
 FILE LAY-SCC
 FILE MRG-IN
;
;==================
; scc
;===================
;SCCSLTN EQU 1 ;slot1
;SCCSLT  EQU 81H ;slot 1-0
;SCCSLTP EQU 10H ;page2=slot1
;SCCSLTE EQU 00H ;page2=slot?-0
SCCSLTN EQU 2 ;slot2
SCCSLT  EQU 82H ;slot 2-0
SCCSLTP EQU 20H ;page2=slot2
SCCSLTE EQU 00H ;page2=slot?-0
PG2MSK EQU 030H
PG2NMSK EQU 0CFH
SCCMIX EQU 988FH
;==================
; default mapped( for 64k/128k ram)
;===================
RAM0 EQU 3
RAM1 EQU 2
RAM2 EQU 1
RAM3 EQU 0
;===================
; system work
;===================
;PSLOT/ESLOT/SLTTBL
;7|  :  |  :  |  :  |  :  |0
;  page3 page2 page1 page0
PSLOT EQU 0A8H ;base-slot register (2bit per page)
ESLOT EQU 0FFFFH ;exp-slot register (2bit per page)
EXPTBL EQU 0FCC1H ;MAIN-ROM SLOT No. / SLOT EXPAND FLAGS
;+0 bit7=Slot0 Expand Flag / bit2-3=MAIN-ROM ExSlot No. / bit1-0=MainROM BsSlot No.
;+1 bit7=Slot1 Expand Flag
;+2 bit7=Slot2 Expand Flag
;+3 bit7=Slot3 Expand Flag
EXBRSA EQU 0FAF8H ;SUB-ROM SLOT No.
SLTTBL EQU 0FCC5H ;+0 - +3 : ex-slot select save
RAMAD0 EQU 0F341H ;ram slots DISK WORK = RAM SLOT
;===================
H_KEYI EQU 0FD9AH
H_TIMI EQU 0FD9FH
KEYIO1 EQU 0A9H
KEYIO2 EQU 0AAH
;===================
; Memory Mapper (WriteOnly)
MAP1 EQU 0FDH
MAP2 EQU 0FEH
MAP3 EQU 0FFH
;===================
; slot bios
RDSLT EQU 000CH; read slot(A) address(HL) to A / use AF,BC,DE
WRSLT EQU 0014H ; write slot(A) address(HL) value(E) / use:AF,BC,D
CALSLT EQU 001CH ; call slot(IYh) address(IX) / use:?
ENASLT EQU 0024H ; change alot(A) / use:all
;===================
; LAY-HEAD WORK
MAP_CR EQU _LAYHEAD+21 ; 3byte
INTERV EQU _LAYHEAD+25 ; 3byte
INTERVE EQU _LAYHEAD+27 ; 3byte
SCCECHO EQU _LAYHEAD+30 ; 2byte
IFF EQU _LAYHEAD+32 ; 2byte
SCCSLTA EQU _LAYHEAD+34 ; 3byte
;===================
;
DHEAD EQU _LAYHEAD-4-4000H
;
 ORG _OPTION
;
 JP LOADER ;0
MAIN0_ JP MAIN0 ;3
MAIN1_ JP MAIN1 ;6
MAIN2_ JP MAIN2 ;9
MAIN3_ JP MAIN3 ;12
MAIN4_ JP MAIN4 ;15
MAIN5_ JP MAIN5 ;18
MAIN6_ JP MAIN6 ;21
INTRP_ JP INTRP ;24
; 27
SCCSL_ DB SCCSLT ; SCC SLOT SELECT
SCCSL_P DB SCCSLTP ; SCC SLOT PSLOT NO
SCCSL_E DB SCCSLTE ; SCC SLOT ESLOT NO
;
;=== LOADER START ===
LOADER LD SP,_OPTION
 LD DE,FCB2 ;LAY-HEAD.BOF
 CALL F_OPEN
 LD HL,1
 LD (FCB2+14),HL
 LD A,7
 LD (FCB2+33),A
 LD DE,_LAYHEAD
 CALL F_DMA
 LD HL,1000H
 LD DE,FCB2
 LD C,_RDRND
 CALL BDOS
;
; --- SCC SLOT ---
; ENASLT VALUE
 LD A,(SCCSL_)
 LD (SCCSLTA+0),A
; PSLOT VALUE
; LD A,(SCCSLT_)
 RLA ; PAGE1
 RLA ;
 RLA ; PAGE2
 RLA ; 
 AND PG2NMSK
 LD (SCCSL_P),A
 LD (SCCSLTA+1),A
; ESLOT VALUE
 LD A,(SCCSL_)
 AND PG2NMSK
 LD (SCCSL_E),A
 LD (SCCSLTA+2),A
; SLOT DISP
 LD A,(SCCSL_)
 AND 3
 ADD A,'0'
 LD (MESG_SL),A
 LD A,(SCCSL_)
 RLA
 JR NC,SCRNINIT
 ; DISP EXPAND SLOT
 LD A,'-'
 LD (MESG_SL+1),A
 LD A,(SCCSL_)
 RRA
 RRA
 AND 3
 ADD A,'0'
 LD (MESG_SL+2),A
SCRNINIT ;
;
; --- SCREEN ---
; screen0 width42
 LD A,42
 LD (0F3AEH),A
 LD A,0
 CALL 005FH
;
 LD DE,MESG_O
 CALL F_PRINT
 LD C,7
 CALL BDOS
;=== READ DATA FILE ===
 LD DE,FCB ;DATA-FILE
 CALL F_OPEN
;
;=== SET SEGMENT to VRAM ===
 LD DE,8000H
 CALL F_DMA
 DI
 LD A,1
 LD E,0
 CALL VADR_W
 LD B,10
 LD HL,SSGVDAT
L_SSGV LD A,(HL)
 INC HL
 LD (FCB+33),A
 PUSH BC
 PUSH HL
 LD DE,FCB
 LD HL,1
 CALL F_READ
 LD HL,8000H
 LD BC,98H
 LD A,20H
L_SSV_ OTIR
 DEC A
 JP NZ,L_SSV_
 POP HL
 POP BC
 DJNZ L_SSGV
 CALL SVLD_E
;=== CAHANGE SLOT to RAM ===
 LD A,(RAMAD0+1)
 LD H,40H
 CALL ENASLT
;=== RESET SEGDAT & RAM ==
MEMINI DI
 LD HL,0
 LD (SEGDAT+0),HL
 LD (SEGDAT+2),HL
;
 LD A,RAM1
 OUT (MAP2),A
 LD DE,8000H
 CALL F_DMA
 XOR A
 LD (FCB+33),A
 LD HL,1
 LD DE,FCB
 CALL F_READ
 DI
;=== RAM TRANSFER ===
 LD A,RAM0
 OUT (MAP2),A
 LD HL,0C000H
 LD DE,8000H
 LD BC,4000H
 LDIR
;=== RAM SET ===
 LD A,RAM0
 OUT (MAP3),A
 LD A,RAM2
 OUT (MAP2),A
;
 LD A,(DAIVA_F)
 OR A
 CALL Z,DAIVA
 CALL SCCSET
;=== GAMESTART ===
 LD A,0C9H
 LD (H_TIMI),A
 LD A,0C3H
 LD (H_KEYI),A
 LD HL,(INTERV)
 LD (H_KEYI+1),HL
;
 LD HL,(4002H)
 JP (HL)
;
;
;==== BANK HANGE MAIN ====
MAIN0 LD HL,SEGDAT+2
 LD (HL),A
 LD DE,200H
 LD C,0FBH ;EI
 CP 2
 JR Z,_MA0
 LD DE,400H
 LD C,0F3H ;DI
_MA0 LD A,RAM0
 OUT (MAP2),A
 LD HL,(IFF)
 LD (HL),C
 LD A,RAM2
 OUT (MAP2),A
 LD A,20H
 LD HL,8000H
 JP SEGVRM
MAIN1 LD HL,SEGDAT+3
 CP (HL)
 JP Z,LOADEND
 CALL SETSEG
 LD DE,220H
 LD HL,0A000H
 CP 3+1
 LD A,20H
 JP Z,SEGVRM
 EX DE,HL
 LD HL,1
 JP LOAD
MAIN2 LD HL,SEGDAT+1
 LD (HL),E
 INC HL
 LD (HL),D
 LD DE,120H
 LD HL,6000H
 LD A,40H
 JP SEGVRM
MAIN3 LD A,E
MAIN4 LD HL,SEGDAT+2
;       LD    D,0
 CP (HL)
 JP NZ,MA4_C1
 INC D
MA4_C1 CALL SETSEG
 CP (HL)
 LD (HL),A
 JR NZ,MA4_C2
 DEC D
 JP Z,LOADEND
MA4_C2 LD HL,8000H
 LD DE,300H
 CP 10+1
 JP Z,_MA4
 LD DE,320H
 CP 11+1
;;      JP    Z,_MA4  ;DANGER in STAGE3
 LD DE,400H
 CP 12+1
 JP Z,_MA4
 EX DE,HL
 LD HL,2
 JP LOAD
_MA4 LD A,40H
 JP SEGVRM
MAIN5 LD HL,SEGDAT
 CP (HL)
 JP Z,LOADEND
 CALL SETSEG
 LD HL,4000H
 LD DE,100H
 CP 0+1
 JP Z,_MA5
 LD DE,520H
 CP 31+1
 JP Z,_MA5
 LD DE,8000H
 LD HL,1
 LD A,RAM1
 OUT (MAP2),A
 JP LOAD
_MA5 LD A,20H
 JP SEGVRM
MAIN6 LD HL,SEGDAT+1
 CALL SETSEG
 LD HL,6000H
 LD DE,500H
 CP 28+1
 JR Z,_MA5
 LD DE,520H
 CP 31+1
 JR Z,_MA5
 LD DE,0A000H
 LD HL,1
 LD A,RAM1
 OUT (MAP2),A
 JP LOAD
;
SETSEG LD (HL),A
 LD (FCB+33),A
 INC A
 INC HL
 RET
SEGSAVE LD A,RAM0
 OUT (MAP2),A
 LD HL,SEGDAT
 LD DE,DHEAD
 LDI
 LDI
 LDI
 LDI
 LD A,RAM2
 OUT (MAP2),A
 RET
;
SEGVRM EX AF,AF'
 LD A,D
 CALL VADR_R
 EX AF,AF'
 LD BC,98H
L_SGVRM INIR
 DEC A
 JP NZ,L_SGVRM
 CALL SVLD_E
 LD A,80H
 OUT (99H),A
 LD A,23H+40H
 OUT (99H),A
 JP LOADEND
;
LOAD PUSH HL
 CALL F_DMA
 POP HL
 LD DE,FCB
 CALL F_READ
LOADEND ;DI
 CALL SEGSAVE
 CALL KAIZOU
 JP MAP_CR
;
;=== DATA AREA ===
FCB DB 0
 DM 'S-LAYDOCDAT'
 DS 37-12
FCB2 DB 0
 DM 'LAY-HEADBOF'
 DS 37-12
;
MESG_O DB CLS
 DM '===[SUPER LAYDOCK -MISSION STRIKER-]==='
 DB LF,LF,CR
 DM '   (C)1987 T&E SOFT  (MSX16K 2M-ROM)   '
 DB LF,LF,CR
 DM '=== for DISK & MSX2 128K MEM-MAPPER ==='
 DB LF,LF,CR
; DM ' OPTION: SCC_SOUND (insert SLOT 2)     '
 DM ' OPTION: SCC_SOUND (insert SLOT '
MESG_SL DB '0'+SCCSLTN,' ',' '
 DM ')   '
 DB LF,CR
 DM '         [STOP]  DEBUG-MENU            '
 DB LF,CR
 DM 'after CHANGE PARAMETER push (CTRL+STOP)'
 DB LF,LF,CR
 DM '             HIT ANY KEY'
 DB ED
;
SSGVDAT DB 0,1,2,3,10,11,12,13,28,31
