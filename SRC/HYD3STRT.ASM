;***************************
;  SET UP  for HYDLIDE3
;***************************
;"HYD3STRT"
	FNAME	"HYD3STRT.BOF"	;*BINHEAD*
	DB	0FEH	;*BINHEAD*
	DW	ORGADR	;*BINHEAD*
	DW	ENDFL-1	;*BINHEAD*
	DW	ORGADR	;*BINHEAD*
;
VERSION:	EQU	0102H	;VERSION ID
;
	INCLUDE	"HYD3HEAD.ASM"
;
VALTYP:	EQU	0FF63H
DACINT:	EQU	0F7F8H
;
STACK:	EQU	0AFFFH
;BAKRAM:	EQU	04000H	;BACK RAM
BAKRAM:	EQU	00000H	;BACK RAM
FWDRAM:	EQU	0C000H	;NORMAL RAM
DIFRAM:	EQU	BAKRAM-FWDRAM	;OFFSET FWDRAM TO BAKRAM
BRAMSZ:	EQU	4000H-4	;SWAP SIZE & CHECKSUM OFFSET (EXCLUDE EXT-SLOT REG.)
;
CURCHN:	EQU	0D0A4H	;CURRENT CHARA NO.
CURCHD:	EQU	0D004H	;CURRENT CHARA DATA
;
CHRDAT:	EQU	FWDRAM+0	;CHARA LIST (NORMAL)
CHRDTB:	EQU	CHRDAT+DIFRAM	;CHARA LIST (BACK RAM)
;CHRDTE:	EQU	09C00H	;CHARA LIST BUF(FOR BASIC EDIT)
CHRDTE:	EQU	0C000H	;CHARA LIST BUF(FOR BASIC EDIT)
CHRD1S:	EQU	100H	;1 CHARA DATA SIZE
CHRD4S:	EQU	400H	;ALL CHARA DATA SIZE (CHRD1S*4)
;		CHRDTE + CHRD4S = DMAADR
DMAADR:	EQU	0B000H	;B000H-CFFFH
DMASIZ:	EQU	2000H
;
;VRAM 0000H-2000H ﾉ ｲﾁｼﾞﾎｿﾞﾝ
;VRMSAV:	EQU	DMAADR	;DISK BUFｦ ﾂｶｳ / RAMﾍﾟｰｼﾞ0ｦ ﾂｶﾜﾅｲ
VRMSAV:	EQU	4000H	;RAMﾍﾟｰｼﾞ1ｦ ﾂｶｳ
VRMSVS:	EQU	2000H
CHREVA:	EQU	6000H	;RAMﾍﾟｰｼﾞ1 DISKBUFF ｼﾖｳｼﾞ ﾀｲﾋ
;
PT_TRAP:	EQU	0F6FFH	;
PTTRAPH:	EQU	PT_TRAP/0100H	;F6FFH	Interrupt mode 2 call address(??FFH)
;PARM1:		EQU	0F6E8H	;100bytes DEFFN PARAM BUF
;
;**** BANK SELECT ****
;4MBit=512KByte
;8KByte Bank: 00-3FH (64 blocks)
BNKSW0:	EQU	6000H	;ROM BANK PAGE0:4000h-5FFFh
BNKSW1:	EQU	6800H	;ROM BANK PAGE1:6000h-7FFFh
BNKSW2:	EQU	7000H	;ROM BANK PAGE2:8000h-9FFFh
BNKSW3:	EQU	6800H	;ROM BANK PAGE3:A000h-BFFFh
;--------------------------------------
; HYD3-EXP TABLE OFFSET
_VERSION:	EQU	0
_EXPSIZ:	EQU	2
_EX_TRAP:	EQU	4
_SET_UP:	EQU	6
_CONTINUE:	EQU	8
;--------------------------------------
;
;
ORGADR:	EQU	0A000H
	ORG	ORGADR
;
; JUMP TABLE
	JP	HYDLID3_	;USR0	EXEC HYDLIDE3
	JP	HYD3_CHK	;USR1	CHECK SLOT
	JP	HYD3SAVE	;USR2	SACE STATE
	JP	HYD3LOAD	;USR3	LOAD STATE
	JP	CAMPCHAR	;USR4	FORCE CAMP NOW
	JP	CHARSUM@	;USR5	CHARACTER CHECKSUM
	JP	CHREEVAC	;USR6	PUSH/POP EDIT-SAVEDATA
;	3*7=21
RETBAS:	JP	RET_BAS
;	21+3=24
;------------------------------
ROMSLT:	DB	1	;ROM SLOT
GAMVER:	DB	0	;HYDLIDE3 = 1:MSX / 2:MSX2
SAVVER:	DB	0	;SAVE AVILABLE? 0:NONE / 1:MSX / 2:MSX2
EVCFLG:	DB	0	;EDITDATA EVACUATED?
DSKERV:	DB	0	;LAST ERROR COMMAND
;	24+5=29
;------------------------------
_BANK0:	DB	0
_BANK1:	DB	0
_BANK2:	DB	0
_BANK3:	DB	0
PACSLT:	DB	0
;
IDDTBL:	DS	BANKNUM * IDDSIZE
IDDCHK:	DS	BANKNUM	;HIT COUNT + ALLZERO(80H)
;
;------------------------------
CNTFLG:	DB	0	;CONTINUE=1
SVW_SP:	DW	0	;STACK SAVE
ARGINT:	DW	0	;DACINT COPY
;CPUSAV:	DB	0
;
;------: CHANGE SLOT sub_rutines
RAM0SLT:	EQU	CSL_RAM0+1
RAM1SLT:	EQU	CSL_RAM1+1
RAM2SLT:	EQU	CALLHYD3+1
;
;
;
INISLW:	;
; (copy value from disk workarea)
	LD	A,(RAMPG0)
	LD	(RAM0SLT),A
	LD	A,(RAMPG1)
	LD	(RAM1SLT),A
	LD	A,(RAMPG2)
	LD	(RAM2SLT),A
	RET
;
CSL_RAM0:	;
	LD	A,0	;slot(rewrite)
	LD	H,00H
	JR	CHSLT_
CSL_BIOS0:	;
	LD	A,(EXPTBL)
	LD	H,00H
CHSLT_:	CALL	CHGSLT	;PAGE0 ﾀｲｵｳ
;IN: A=SLOT, HL=ADDRESS
;USE: ALL
	DI
	RET
CSL_RAM1:	;
	LD	A,0	;slot(rewrite)
	LD	H,40H
	JR	ENSLT_
CSL_ROM1:	;
	LD	A,(ROMSLT)
	LD	H,40H
	JR	ENSLT_
CSL_BIOS:	;
	CALL	CSL_BIOS0
CSL_BIOS1:	;
	LD	A,(EXPTBL)
	LD	H,40H
ENSLT_:	CALL	ENASLT	;PAGE1-2 ﾀｲｵｳ
;IN: A=SLOT, HL=ADDRESS
;USE: ALL
	DI
	RET
;IN: HL=READ ADDRESS
;OUT: A=DATA
;USE: AF,BC,DE
RDB_ROM1:	;
	LD	A,(ROMSLT)
	CALL	RDSLT
	DI
	RET
;
;ADDHLA:	ADD	A,L
;	LD	L,A
;	RET	NC
;	INC	H
;	RET
;
;; CHANGE to Z80 (SAVE OLD MODE)
;CPUZ80:	LD	A,(GETCPU)
;	OR	A
;	RET	Z
;	LD	A,(CHGCPU)
;	OR	A
;	RET	Z
;	CALL	GETCPU
;	LD	(CPUSAV),A
;	OR	A
;	RET	Z
;	LD	A,80H	;Z80
;	CALL	CHGCPU
;	RET
;;
;; CHANGE to SAVED CPU MODE
;CPURES:	LD	A,(GETCPU)
;	OR	A
;	RET	Z
;	LD	A,(CHGCPU)
;	OR	A
;	RET	Z
;	LD	A,(CPUSAV)
;	OR	80H
;	CALL	CHGCPU
;	RET
;
;------------------------ START
; A=USR( HYD3-EXP adrress )
;  ｱﾄﾞﾚｽ ｶﾞ ﾏｲﾅｽ: continue
HYDLID3_:	;
;
;INT ONLY CALL USRINI
;
	CP	2
	RET	NZ	;NOT INT
	XOR	A
	LD	(CNTFLG),A
	LD	HL,(DACINT)
	LD	A,H
	OR	A
	JP	M,HYDLID3@
; (set continue flag)
	LD	A,1
	LD	(CNTFLG),A
; (negate hl)
	DEC	HL
	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	LD	(DACINT),HL
;-----: ( start hydlide 3 )-----
HYDLID3@:	;
	LD	(ARGINT),HL
	DI
	LD	(SVW_SP),SP
	LD	SP,STACK
; (copy value from disk workarea)
	CALL	INISLW
; (set memory)
	LD	A,(CNTFLG)
	OR	A
	CALL	Z,MEM_NEW
	CALL	EXPPCPY
	CALL	MEM_SWAP
; (need version check?)
	LD	A,(CNTFLG)
	OR	A
	JR	Z,SETVER
; (version check)
	LD	A,(GAMVER)	; NONE/MSX1/MSX2
	LD	HL,MSXVER
	CP	(HL)
	JP	NZ,ERRRET
	LD	HL,(BASVER)	;DATA:HYD3STRT VERSION
	LD	DE,VERSION	;THIS:HYD3STRT VERSION
	OR	A
	SBC	HL,DE
	JP	NZ,ERRRET
	LD	HL,(EXPVER)	;DATA:HYD3-EXP VERSION
	LD	IX,(ARGINT)
	LD	E,(IX+_VERSION+0)	;
	LD	D,(IX+_VERSION+1)	;THIS:HYD3-EXP VERSION
	OR	A
	SBC	HL,DE
	JP	NZ,ERRRET
SETVER:	;
	LD	A,(GAMVER)
	LD	(MSXVER),A
	LD	HL,VERSION
	LD	(BASVER),HL
HYDLID3E:	;
	CALL	CSL_BIOS0
	CALL	CSL_ROM1
;	CALL	MAKHASH	;HYD3_CHKで事前チェックされている
	CALL	SET_VDP
;
	LD	A,(H_KEYI)
	LD	C,A
	LD	A,(H_TIMI)
	LD	B,A
	LD	A,0C9H	;RET
	LD	(H_KEYI),A
	LD	(H_TIMI),A
	CALL	CPUZ80
	DI
	LD	A,C
	LD	(H_KEYI),A
	LD	A,B
	LD	(H_TIMI),A
;
; (interrupt rutine pointer address)
	LD	A,PTTRAPH
	LD	H,A
	LD	L,0FFH
; (interrupt rutine address)
	LD	IX,(ARGINT)
	LD	E,(IX+_EX_TRAP+0)
	LD	D,(IX+_EX_TRAP+1)	;DE=EX_TRAP
; (set interrupt address to pointer)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	I,A
	IM	2
;	LD	IX,(ARGINT)
	LD	DE,_SET_UP	;NEW GAME
	LD	A,(CNTFLG)
	OR	A
	JP	Z,CALLHYD3
	LD	DE,_CONTINUE	;CONTINUE
CALLHYD3:	;
	LD	B,0	;RAM PAGE2 SLOT (over written)
	LD	A,(ROMSLT)
	LD	C,A	;GAME ROM SLOT
	ADD	IX,DE	;JUMP ADDRESS POINTER
	LD	DE,FNC_CALL
	LD	HL,RETBAS
	LD	SP,IX	;ジャンプ先で必ずSPセット
	RET	;PC=(IX) ※JP(IX)だとPC=IXになってしまうので
;
;-------------- RETURN TO BASIC FROM GAME
; IX=IDD ADDRESS
RET_BAS:	;
	DI
	IM	1	;(interrupt mode 1)
; (bank chek - compare data)
;	この時点ではまだページ3にSTACKを置く必要がある
;	(STACKがページ2にあるとRDLSTでページ2を読み込むときにハングする)
;	LD	SP,STACKA	;※ HYD3-EXPではページ3にある。そのまま流用する（SPを戻して破壊しない）
	CALL	LOG_IDD
;
; (USE PAC? LOAD SRAM AND HIDE SRAM)
	LD	SP,STACK	;もうここからページ2にスタックを置く
	LD	A,(0FD9DH)	;pac's slot(hydlide3)
	LD	(PACSLT),A
	OR	A
	JR	Z,RESBAS	; 00=NO PAC
	INC	A
	JR	Z,RESBAS	; FF=NO PAC
	DEC	A
;
;(LOAD SAVE DATA : PAC SRAM -> GAME)
	PUSH	AF
	LD	BC,0101H	; blocksize=1 / start=1
	LD	HL,CHRDAT	; load at NORMAL CHARA LIST (NON PAC)
	CALL	LOADPAC
	POP	AF
;
	LD	H,40H
	CALL	ENASLT
	XOR	A
	LD	(5FFFH),A	; DISABLE SRAM
;
RESBAS:	;
;
	LD	A,(H_KEYI)
	LD	C,A
	LD	A,(H_TIMI)
	LD	B,A
	LD	A,0C9H	;RET
	LD	(H_KEYI),A
	LD	(H_TIMI),A
	CALL	CPURES
	DI
	LD	A,C
	LD	(H_KEYI),A
	LD	A,B
	LD	(H_TIMI),A
;
	CALL	MEM_SWAP
	CALL	CSL_BIOS
;
;(copy SAVE DATA : GAME -> EDIT BUF)
	CALL	CSL_RAM0
	LD	HL,CHRDTB
	LD	DE,CHRDTE
	LD	BC,CHRD4S	; 100H * 4chara
	LDIR
	CALL	CSL_BIOS0
;
	LD	A,(GAMVER)
	LD	(SAVVER),A	; STATE SAVE OK
;
	LD	SP,(SVW_SP)
	LD	HL,_BANK0
	LD	(DACINT),HL
	EI
	RET	;RETI
;-------------- RETURN TO BASIC BECAUSE VERSION ERROR
ERRRET:
;(restore mem and cancel end)
	CALL	MEM_SWAP
	CALL	CSL_BIOS
;
	LD	SP,(SVW_SP)
	LD	HL,0	;ERROR = 0
	LD	(DACINT),HL
	EI
	RET
;
;-------------- CHECK CARTRIDGE
;A%=USR1(0)	ROM EXIST. CHECK
; A%: 1:MSX 2:MSX2 0:NOTHING
;A%=USR1(1) 	ROM EXIST. CHECK & MAKE BANK_HASH
; A%: 1:MSX 2:MSX2 0:NOTHING
;A%=USR1(-1)	INVALIDATE STATE SAV
; A%: NO USE
HYD3_CHK:	;
;
;INT ONLY CALL USRINI
;
	CP	2
	RET	NZ	;NOT INT
; (copy value from disk workarea)
	CALL	INISLW
;
	LD	HL,(DACINT)
	EX	DE,HL	;DE=PARAM
;
	INC	DE
	LD	A,D
	OR	E
	DEC	DE	; *FLAG: NO CHANGE
	JR	NZ,HYD3CHK@	;PARAM != -1
	CALL	DELSVDT		;PARAM=-1 : INVALIDATE STATE
	EI
	RET
HYD3CHK@:	;
	LD	C,1
	CALL	SLTCHK@
	JR	NZ,HYD3CHKE
	LD	C,2
	CALL	SLTCHK@
HYD3CHKE:	;
	LD	A,(PACSLT)
	OR	A
	JR	Z,HYD3CHPAC	; 00=NO PAC
	INC	A
	JR	Z,HYD3CHPAC	; FF=NO PAC
	JR	HYD3CHKR
HYD3CHPAC:	;
	CALL	CHKPAC
	LD	(PACSLT),A
	CALL	CSL_BIOS1
	EI
HYD3CHKR:	;
	LD	A,(GAMVER)
	LD	L,A
	LD	H,0
	LD	(DACINT),HL	;RET VAL
	RET
;
; (CHECK SLOT/EXP SLOT)
;IN:  C=BASE SLOT
;OUT: Z=NG / NZ=OK
SLTCHK@:	;
	LD	HL,EXPTBL
	LD	A,C
	CALL	ADDHLA
	LD	A,(HL)	;EXPSLT CHECK
	AND	80H
	LD	A,C
	JR	NZ,EXPSLTC
	LD	(ROMSLT),A
	JR	HYD3CHK_
; (CHECK EXP SLOT)
EXPSLTC:	;
	LD	B,04H
	OR	80H
	LD	C,A
EXPSLTL:	;
	LD	(ROMSLT),A
	CALL	HYD3CHK_
	RET	NZ
	LD	A,C
	ADD	A,04H	;EXPSLT+1
	LD	C,A
	DJNZ	EXPSLTL
	XOR	A
	RET
;(CHECK MATCH ROM STRING)
;OUT	Z=NG / NZ=OK
HYD3CHK_:	;
	PUSH	BC
	PUSH	DE
	CALL	CSL_ROM1
	XOR	A
	LD	(BNKSW0),A	;ROM BANK SELECT
	INC	A
	LD	(BNKSW1),A	;ROM BANK SELECT
	INC	A
	LD	(BNKSW2),A	;ROM BANK SELECT
	INC	A
	LD	(BNKSW3),A	;ROM BANK SELECT
	LD	DE,H_MSX
	CALL	H3CHK_S
	JR	Z,H3CHK_E
	LD	DE,H_MSX2
	CALL	H3CHK_S
	JR	Z,H3CHK_E
	XOR	A
H3CHK_E:	;
	POP	DE
	PUSH	DE
	LD	(GAMVER),A
	OR	A
	JR	Z,H3CHK_1
	LD	A,E
	OR	D
	JR	Z,H3CHK_1	;PARAM=0 : END
;(ROMが存在したらHASH作成&中断データ存在チェック)
	CALL	MAKHASH
	CALL	CHKSAV
;
H3CHK_1:	;
	CALL	CSL_BIOS1
	EI
	LD	A,(GAMVER)
	OR	A
	POP	DE
	POP	BC
	RET
;
H_MSX:	DB	'HYDLIDE3MSX '	;*DM*
	DB	1
H_MSX2:	DB	'HYDLIDE3MSX2'	;*DM*
	DB	2
;(OUT Z=OK/NZ=NG)
H3CHK_S:	;
	LD	HL,4004H
	LD	B,12
H3CHKS_:	;
	LD	A,(DE)
	INC	DE
	CP	(HL)
	INC	HL
	RET	NZ
	DJNZ	H3CHKS_
	LD	A,(DE)	;ver.No.
	RET
;
;--- CALC RAM CHECKSUM ---
;(NEED CHANGE PAGE0 TO RAM)
;OUT:	DE=CHECKSUM
;	HL=CHECKSUM ADDRESS
CSUMSTEP:	EQU	113
CALSUM:	;
	LD	HL,BAKRAM
	LD	BC,BRAMSZ
	LD	DE,0
CALSUM_L:	;
	LD	A,(HL)
	ADD	A,E
	LD	E,A
	JR	NC,CALSUML2
	INC	D
CALSUML2:	;
	LD	A,L
	ADD	A,CSUMSTEP
	LD	L,A
	JR	NC,CALSUML3
	INC	H
CALSUML3:	;
	LD	A,C
	SUB	A,CSUMSTEP
	LD	C,A
	JR	NC,CALSUML4
	DEC	B
CALSUML4:	;
	JR	NZ,CALSUM_L
	RET
;
;--- CONTINUE AVILABLE ? ---
CHKSAV:	CALL	CSL_RAM0
	CALL	CALSUM	;DE=CALC'ED CHECKSUM
	LD	HL,(BAKRAM+BRAMSZ)	;SAVED CHECKSUM
	XOR	A
	SBC	HL,DE
	JR	NZ,CHKSAV_E
	LD	HL,(BASVER+DIFRAM)	;DATA:HYD3STRT VERSION
	LD	DE,VERSION	;THIS:HYD3STRT VERSION
	XOR	A
	SBC	HL,DE
	JR	NZ,CHKSAV_E
	LD	HL,(EXPVER+DIFRAM)	;DATA:HYD3-EXP VERSION
	LD	IX,(DACINT)
	LD	E,(IX+_VERSION+0)	;
	LD	D,(IX+_VERSION+1)	;THIS:HYD3-EXP VERSION
	XOR	A
	SBC	HL,DE
	JR	NZ,CHKSAV_E
	LD	A,(MSXVER+DIFRAM)	; NONE/MSX1/MSX2
	LD	HL,GAMVER
	CP	(HL)
CHKSAV_E:	;
	PUSH	AF
	CALL	CSL_BIOS0
	POP	AF
	LD	(SAVVER),A
;	EI	まだそのまま
	RET
;
;-- STATE SAVE ｦ ﾑｺｳｶ ｽﾙ --
DELSVDT:	;
	XOR	A
	LD	(SAVVER),A	;NO SAVE DATA
	CALL	CSL_RAM0
	XOR	A
	LD	(MSXVER+DIFRAM),A	;NO SAVE DATA
	CALL	CSL_BIOS0
;	EI
	RET
;
;---------------- FUNCTION CALL
FNC_CALL:	;
;	NO OPERATION
	RET
;--------SET: MEMORY TO NEW GAME
MEM_NEW:	;
	CALL	CSL_RAM0
;(FILL ZERO)
	LD	HL,BAKRAM	;0000H
	LD	DE,BAKRAM+1
	LD	BC,4000H-1
	XOR	A
	LD	(HL),A
	LDIR
;(COPY FORWARD RAM TO BACK RAM) C000H-FFFCH
;	LD	HL,FWDRAM	;00000H
;	LD	DE,BAKRAM	;04000H
;	LD	BC,BRAMSZ	; EXCLUDE EXT-SLOT REG.
;	LDIR
;(COPY FORWARD RAM TO BACK RAM) F380H-FFFCH ONLY
	LD	HL,0F380H
	LD	DE,0F380H+DIFRAM
	LD	BC,0FFFCH-0F380H	; EXCLUDE EXT-SLOT REG.
	LDIR
;
;(SAVE SAVE DATA : BASIC BUF -> PAC SRAM)
;	(CHECK EDIT DATA AREA)
	LD	C,0
	LD	HL,CHRDTE+000H
	CALL	CHAR_SUM
	SUB	(HL)
	SUB	1
	RL	C
	LD	HL,CHRDTE+100H
	CALL	CHAR_SUM
	SUB	(HL)
	SUB	1
	RL	C
	LD	HL,CHRDTE+200H
	CALL	CHAR_SUM
	SUB	(HL)
	SUB	1
	RL	C
	LD	HL,CHRDTE+300H
	CALL	CHAR_SUM
	SUB	(HL)
	SUB	1
	RL	C
	LD	A,C
	OR	A
	JR	Z,MEM_NEW_E	; NO DATA
;	(SAVE DATA to PAC)
	LD	A,(PACSLT)
	OR	A
	JR	Z,MEM_NEW_E	; 00=NO PAC
	INC	A
	JR	Z,MEM_NEW_E	; FF=NO PAC
	DEC	A
	LD	BC,0101H	; blocksize=1 / start=1
	LD	HL,CHRDTE	; load buff
	CALL	SAVEPAC
;
MEM_NEW_E:	;
;(copy SAVE DATA : BASIC BUF -> BACKRAM GAME AREA)
	LD	HL,CHRDTE
	LD	DE,CHRDTB
	LD	BC,CHRD4S	; 100H * 4chara
	LDIR
	RET
EXPPCPY:	;
	CALL	CSL_RAM0
;(COPY HYD3-EXP TO BACK RAM) C000H-FFFCH
	LD	IX,(ARGINT)
	LD	C,(IX+_EXPSIZ+0)	;
	LD	B,(IX+_EXPSIZ+1)	;BC=HYD3-EXP SIZE
	PUSH	IX
	POP	HL	;HL: HYD3-EXP
	LD	DE,DIFRAM
	ADD	IX,DE
	PUSH	IX
	POP	DE	;DE: HYD3-EXP+DIFRAM
	LDIR
	RET
;------------------ SWAP MEMORY
MEM_SWAP:	;
	CALL	CSL_RAM0
	LD	HL,FWDRAM	;0C000H
	LD	DE,BAKRAM	;00000H
	LD	BC,BRAMSZ	; EXCLUDE EXT-SLOT REG.
L_MEMSWP:	;
	LD	A,(HL)
	EX	AF,AF'
	LD	A,(DE)
	LD	(HL),A
	EX	AF,AF'
	LD	(DE),A
	INC	HL
	INC	DE
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,L_MEMSWP
;
	CALL	CALSUM	;DE=CALC'ED CHECKSUM
	LD	HL,BAKRAM+BRAMSZ
	LD	(HL),E	;SAVE CHECKSUM
	INC	HL
	LD	(HL),D	;SAVE CHECKSUM
	RET
;--------------- Make Check IdentifY Data
;  (Bank No. ﾄｸﾃｲ ﾖｳ ﾁｪｯｸﾁ)
;
MAKHASH:	;
	CALL	CSL_ROM1
	LD	A,0	;BANK No. 0-3FH
	LD	HL,IDDTBL
;
	LD	IX,IDDCHK
MKHASH_L:	;
	LD	(BNKSW0),A
	EX	AF,AF'
;(CHECK ALL-ZERO)
	EXX	;<--
	LD	HL,BANKPG0
	LD	BC,BANKSIZ
	LD	E,0	;AllZero=0
MKHASHL1:	;
	LD	A,(HL)
	OR	E
	LD	E,A	;AllZero=0
	JR	NZ,ZCHHASH
IF 1
	INC	H	;FAST CHECK
	DEC	B
ELSE
	INC	HL
	DEC	BC
ENDIF
	LD	A,C
	OR	B
	JR	NZ,MKHASHL1
ZCHHASH:	;
	XOR	A
	CP	E	;Cy=NonZero
	CCF		;Cy=AllZero
	RRA		;80H=AllZero
	LD	(IX+0),A
	INC	IX
	EXX	;<--
;
;(MAKE IDENTIFY DATA)
	LD	DE,IDDBAS0
	LD	B,IDDSIZE
MKHASHL2:	;
	LD	A,(DE)
	LD	(HL),A
	LD	A,4
	ADD	D
	LD	D,A	;DE=DE+400H (2000H/8=400H)
	INC	HL	;HL=HL+1
	DJNZ	MKHASHL2
;
	EX	AF,AF'
	INC	A
	CP	BANKNUM	;0-3FH
	JR	C,MKHASH_L
;
; (duplicate check)
	LD	HL,IDDTBL
	LD	DE,IDDCHK
	LD	B,BANKNUM
DPCHASH:	;
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,1	;COUNT MODE
	CALL	HASH_CMP
	POP	HL
	LD	BC,IDDSIZE
	ADD	HL,BC	;HL=NEXT BANK IDD
	POP	DE
	POP	BC
	EX	DE,HL	;DE<->HL
	AND	7FH	;80H=NonZero Flag
	OR	(HL)	;A=NonZero Flag + COUNT
	EX	DE,HL	;DE<->HL
	LD	(DE),A
	INC	DE
	DJNZ	DPCHASH
;
; (set default baknk)
	XOR	A
	LD	(BNKSW0),A	;ROM BANK SELECT
	INC	A
	LD	(BNKSW1),A	;ROM BANK SELECT
	INC	A
	LD	(BNKSW2),A	;ROM BANK SELECT
	INC	A
	LD	(BNKSW3),A	;ROM BANK SELECT
	RET
;
;-------------- Check bank-identifier
;  (bank no. ﾉ ﾄｸﾃｲ)
; HL = BANK No. LIST ADDRESS
LOG_IDD:	;
	PUSH	HL
	LD	HL,IDDBAS0
	CALL	HASH_CHK
	LD	(_BANK0),A
	LD	HL,IDDBAS1
	CALL	HASH_CHK
	LD	(_BANK1),A
	LD	HL,IDDBAS2
	CALL	HASH_CHK
	LD	(_BANK2),A
	LD	HL,IDDBAS3
	CALL	HASH_CHK
	LD	(_BANK3),A
;  (BANK LIST COPY -> HYD3-EXP WORKAREA)
	POP	DE
	LD	HL,_BANK0
	LD	BC,4
	LDIR
	RET
;------------------ (check sub)
HASH_CHK:	;
; HL= CHCECK ADDRESS
	LD	DE,IDDBUF
	LD	B,IDDSIZE
HASH_RDL:	;
;COPY ROM HASH TO BUF
	PUSH	BC
	PUSH	DE
	CALL	RDB_ROM1
	POP	DE
	POP	BC
	LD	(DE),A
	LD	A,4
	ADD	A,H
	LD	H,A	;HL=HL+400H (2000H/8=400H)
	INC	DE	;DE=DE+1
	DJNZ	HASH_RDL
	LD	A,0	;FIND1ST MODE
	LD	HL,IDDBUF
;	JR	HASH_CMP
;
;-------COMPARE BANK IDNTIFIER
;	IN:	HL=ADDRESS
;		A=MODE ... 0:MATCH(FIND1ST) / 1:COUNT(ALL HIT)
;	OUT:	(MATCH MODE) A=BANK No.
;		(COUNT MODE) A=HIT COUNT
;	USE:	ALL,AF'
HASH_CMP:	;
	LD	IX,0	;COUNT=0
	EX	AF,AF'	;A'= MODE
	LD	C,0	;BANK No.
	LD	DE,IDDTBL
HASH_SRHL:	;
	PUSH	HL
	POP	IY	;IY=HL
	LD	B,IDDSIZE
HASH_CMP1:	;
	LD	A,(DE)
	CP	(HL)
	JR	NZ,HASH_CMPN
	INC	DE
	INC	HL
	DJNZ	HASH_CMP1
	JR	HASH_FIND	;ALL OK
HASH_CMPN:	; NOT MATCHED = SEARCH NEXT
	INC	DE
	DJNZ	HASH_CMPN	;DE+B = NEXT IDDTBL
HASH_SRHN:	;
	PUSH	IY
	POP	HL	;HL=IY
	INC	C	;BANK No.+1
	LD	A,C
	CP	BANKNUM	;0-3FH
	JR	C,HASH_SRHL	;SEARCH LOOP
HASH_FIND:	; MATCHED
	EX	AF,AF'
	OR	A
	JR	Z,HASH_CMPE
	EX	AF,AF'
	LD	A,C	;A=BANK No.
	CP	BANKNUM	;BANK 0-3FH
	PUSH	IX
	POP	BC	;C=COUNT
	JR	NC,HASH_CMPE	;40H:END / C=COUNT
	LD	C,A	;C=BANK No.
	INC	IX	;COUNT+=1
	JR	HASH_SRHN	;SEARCH NEXT / C=BANK No.
HASH_CMPE:	;
	LD	A,C
	RET
;
;---------------------- set VDP (use bios value copy)
SET_VDP:	;
	RET
;
;MSX1: MSX1VDP          <- BASIC側で設定済み
;MSX2: MSX2VDP, HD32PAL <- BASIC側で設定済み
; VDP*SAVに保存された値は無意味（特にMSX2版はBIOSでのVDPアクセスではない模様)
;	LD	BC,(7)
;	INC	C	;C=99H
;	DI
;	XOR	A
;	OUT	(C),A
;	LD	A,17+80H
;	OUT	(C),A
;	INC	C
;	INC	C	;C=9BH
;	LD	HL,REG0SV	;VDP 0-7 work
;	LD	B,6-0+1	;R#0-6
;	OTIR
;	LD	A,(GAMVER)
;	DEC	A
;	JR	Z,SETVDP@
;	LD	A,15
;SETVDP@:	;
;	OUT	(C),A	;R#7 :COLOR
;;	LD	A,(GAMVER)
;;	DEC	A
;;	RET	Z	; MSX1:END
;;
;	LD	HL,RG8SAV	;VDP 8-23 work
;	LD	B,14-8+1	;R#8-14
;	OTIR
;;(skip R#15-22)
;	DEC	C
;	DEC	C	;C=99H
;	XOR	A
;	OUT	(C),A
;	LD	A,23+80H	;R#23 VSCROLL=0
;	OUT	(C),A
;	RET
;
;------------------------------
; SAVE GAME STATE
;------------------------------
HYD3SAVE:	;
;
	CALL	USRINI	;SETUP USER PARAM
;
	EX	AF,AF'
	LD	A,(RAM0SLT)	;RAM SLOT not INITIALIZED
	OR	A
	RET	Z
	LD	A,(RAM1SLT)	;RAM SLOT not INITIALIZED
	OR	A
	RET	Z
	EX	AF,AF'
;
	CP	2
	JP	Z,SAVEVTMP
	CP	3
	RET	NZ	;ERROR
	PUSH	DE
	CALL	SET_FNAME
	POP	DE
	JR	NZ,HYD3SV_E
	PUSH	DE
	CALL	SAVE_MEM
	POP	DE
	CALL	Z,SAVE_VRM	;SAVE_MEM NOT ERROR
HYD3SV_E:	;
	JP	ERRC_RET
;
;------------------------------
; LOAD GAME STATE
;------------------------------
HYD3LOAD:	;
;
	CALL	USRINI	;SETUP USER PARAM
;
	EX	AF,AF'
	LD	A,(RAM0SLT)	;RAM SLOT not INITIALIZED
	OR	A
	RET	Z
	LD	A,(RAM1SLT)	;RAM SLOT not INITIALIZED
	OR	A
	RET	Z
	EX	AF,AF'
;
	CP	2
	JP	Z,LOADVTMP
	CP	3
	JR	NZ,HYD3LDER
	PUSH	DE
	CALL	SET_FNAME
	POP	DE
	JR	NZ,HYD3LDER
	PUSH	DE
	CALL	LOAD_MEM
	POP	DE
	CALL	Z,LOAD_VRM	;LOAD_MEM NOT ERROR
	JR	NZ,HYD3LDER
; OK
;
;(copy SAVE DATA : GAME -> EDIT BUF)
	CALL	CSL_RAM0
	LD	HL,CHRDTB
	LD	DE,CHRDTE
	LD	BC,CHRD4S	; 100H * 4chara
	LDIR
	CALL	CSL_BIOS0
;
	JR	HYD3LD_E
;
HYD3LDER:	;
	CALL	DELSVDT
;
HYD3LD_E:	;
	EI
	JP	ERRC_RET
;
;-------------  (2000H TEMPORARY) Save VRAM to RAM
; VRAMMからVRAM BUFFへ一時的に転送しておく
SAVEVTMP:	;
	DI
	LD	BC,(6)
	INC	C	;C=99H
; (change page0 to ram)
	PUSH	BC
	CALL	CSL_RAM1
	POP	BC
;  (set vram read)
	XOR	A	;v_page 0
	OUT	(C),A
	LD	A,14+80H
	OUT	(C),A
	XOR	A
	OUT	(C),A
	XOR	A
	OUT	(C),A
; (transfer)
	LD	HL,VRMSAV
	DEC	C	;C=98H
	LD	B,VRMSVS AND 0FFH
	LD	A,VRMSVS >> 8	;20H*100H=2000H
L_SVVTMP:	;
	INIR
	DEC	A
	JP	NZ,L_SVVTMP
; (change page0 to main-rom)
	CALL	CSL_BIOS1
;
	EI
	XOR	A
	JP	ERRC_RET
;
;-----------  (2000H TEMPORARY) Load VRAM from RAM
LOADVTMP:	;
	DI
	LD	BC,(7)
	INC	C	;C=99H
; (cahnge page0 to ram)
	PUSH	BC
	CALL	CSL_RAM1
	POP	BC
; (set vram write)
	XOR	A
	OUT	(C),A
	LD	A,14+80H
	OUT	(C),A
	XOR	A
	OUT	(C),A
	LD	A,0+40H
	OUT	(C),A
; (transfer)
	LD	HL,VRMSAV
	DEC	C	;C=98H
	LD	B,VRMSVS AND 0FFH
	LD	A,VRMSVS >> 8	;20H*100H=2000H
L_LDVTMP:	;
	OTIR
	DEC	A
	JP	NZ,L_LDVTMP
; (change page0 to main-rom)
	CALL	CSL_BIOS1
;
	EI
	XOR	A
	JP	ERRC_RET
;
;------------- USR PARAM SETUP
USRINI:	;
	PUSH	AF
	XOR	A
	LD	(DSKERV),A	;CLEAR ERROR
	POP	AF
;
	LD	(USRVTYP),A
	CP	3	;STR
	JP	Z,_PRMINT
	RET	NC	;INT=OK / DBL,SNG=NG
	INC	HL
	INC	HL
	LD	A,2	;SIZE=2
	JR	USRINI_
_PRMINT:	;
	CALL	STRINGP
USRINI_:	;
	LD	(USRVADR),HL	;STR
	LD	(USRVLEN),A	;SIZE
	LD	A,(USRVTYP)
	RET
;
USRVTYP:	;
	DB	0
USRVLEN:	;
	DB	0
USRVADR:	;
	DW	0
;
;------------- STRING PARAMETER
; DE = pointer
STRINGP:	;
	LD	A,(DE)	;A=SIZE
	EX	DE,HL
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	DEC	HL
	DEC	HL
	EX	DE,HL	;HL=ADR
	RET
;----------------- Set Filename
SET_FNAME:	;
; CALL STRINGP
	LD	HL,(USRVADR)
	LD	A,(USRVLEN)
	CP	8
	RET	NZ
	LD	DE,FCB+1
	LD	BC,8
	LDIR
	XOR	A
	RET
;------------- Check Disk Error
SYSCAL_C:	;
	PUSH	BC
	CALL	SYSCAL
	POP	BC
CHK_ERR:	;
	OR	A
	RET	Z
	PUSH	AF
	LD	A,C	;ERROR CMD
	LD	(DSKERV),A
	POP	AF
	RET
;------------ Return Error Flag
ERRC_RET:	;
	LD	A,(DSKERV)	;A<>0:ERROR
	LD	C,A
	LD	B,0
	LD	HL,(USRVADR)	;INTVAL
	LD	(HL),C
	LD	A,(USRVLEN)
	CP	2
	RET	C	;SIZE<2
	INC	HL
	LD	(HL),B
	RET
;-------------- Set D.M.Address
SET_DMA:	;
	LD	C,1AH
	LD	DE,DMAADR
	JP	SYSCAL
;-------------------- Open File
F_OPEN:	LD	C,0FH
	LD	DE,FCB
	CALL	SYSCAL_C
	LD	IX,FCB
	LD	H,0
	LD	(IX+12),H	;CURRENT BLOCK = 0
	LD	(IX+13),H
	LD	(IX+14),1	;RECORD SIZE = 1
	LD	(IX+15),H
	LD	(IX+32),H	;CURRENT RECORD No.=0
	LD	(IX+33),H	;RANDOM RECORD No.=0
	LD	(IX+34),H
	LD	(IX+35),H
	LD	(IX+36),H
	RET
;------------------- File Close
F_CLOSE:	;
	LD	C,10H
	LD	DE,FCB
	JP	SYSCAL_C
;--------- Write Disk 2000hbyte
D_WRITE:	;
	LD	C,26H
	LD	DE,FCB
	LD	HL,DMASIZ
	JP	SYSCAL_C
;---------- Read Disk 2000hbyte
D_READ:	LD	C,27H
	LD	DE,FCB
	LD	HL,DMASIZ
	JP	SYSCAL_C
;
;------------ Write Memory File
SAVE_MEM:	;
	CALL	SET_DMA
	LD	HL,EXTMSX1	;MSX1:H3B=RAM+VRAM
;	LD	A,(GAMVER)
	LD	A,(SAVVER)
	DEC	A
	JR	Z,WRT_MEM_
	LD	HL,EXTMSX2	;MSX2:H3M=RAM (H3V=VRAM)
WRT_MEM_:	;
	LD	DE,FCB+9
	LDI
	LDI
	LDI
; (create file)
	LD	DE,FCB
	LD	C,16H
	CALL	SYSCAL_C
	JR	NZ,WRT_ME_E	;ERROR
	CALL	F_OPEN
	JR	NZ,WRT_ME_E	;ERROR
; (write data)
	CALL	CSL_RAM0
	LD	HL,BAKRAM	;0000H
	LD	DE,DMAADR
	LD	BC,DMASIZ	;2000H
	LDIR
	CALL	CSL_BIOS0
	CALL	D_WRITE
	JR	NZ,WRT_ME_E	;ERROR
;
	CALL	CSL_RAM0
	LD	HL,BAKRAM+DMASIZ	;2000H
	LD	DE,DMAADR
	LD	BC,DMASIZ	;2000H
	LDIR
	CALL	CSL_BIOS0
	CALL	D_WRITE
	JR	NZ,WRT_ME_E	;ERROR
; (close)
;	LD	A,(GAMVER)
	LD	A,(SAVVER)
	DEC	A
	CALL	NZ,F_CLOSE	;MSX1 not close (H3B=RAM+VRAM)
WRT_ME_E:	;
; (restore slot)
	EI
	RET
;
;------------- Load Memory File
LOAD_MEM:	;
	CALL	SET_DMA
	LD	HL,EXTMSX1	;MSX1:H3B=RAM+VRAM
	LD	A,(GAMVER)
	DEC	A
	JR	Z,READMEM_
	LD	HL,EXTMSX2	;MSX2:H3M=RAM (H3V=VRAM)
READMEM_:	;
	LD	DE,FCB+9
	LDI
	LDI
	LDI
; (open)
	CALL	F_OPEN
	JR	NZ,README_E	;ERROR
; (read)
	CALL	D_READ	;READ FILE 2000H
	JR	NZ,README_E	;ERROR
	CALL	CSL_RAM0
	LD	HL,DMAADR
	LD	DE,BAKRAM	;0000H
	LD	BC,DMASIZ	;2000H
	LDIR
	CALL	CSL_BIOS0
;
	CALL	D_READ	;READ FILE 2000H
	JR	NZ,README_E	;ERROR
	CALL	CSL_RAM0
	LD	HL,DMAADR
	LD	DE,BAKRAM+DMASIZ	;2000H
	LD	BC,DMASIZ	;2000H
	LDIR
	CALL	CSL_BIOS0
	XOR	A	;OK
README_E:	;
; (restore slot)
	EI
	RET
;---------- Save VideoRAM File
SAVE_VRM:	;
	CALL	SET_DMA
;	LD	A,(GAMVER)
	LD	A,(SAVVER)
	DEC	A
	PUSH	AF
	JR	Z,WRT_VRM_	;MSX1:H3B=RAM+VRAM
;
; (create file)
	LD	HL,EXPVRM	;MSX2:H3V=VRAM (H3M=RAM)
	LD	DE,FCB+9
	LDI
	LDI
	LDI
	LD	C,16H
	LD	DE,FCB
	CALL	SYSCAL_C
	JR	NZ,WRT_VRME	;ERROR
	CALL	F_OPEN
	JR	NZ,WRT_VRME	;ERROR
;
; (write vram)
WRT_VRM_:	;
	LD	DE,0	;0000H(READ)+00000H(ADR)/200H
	LD	BC,(6)
	INC	C	;C=99H
	LD	B,16	;MSX2 128K
	POP	AF
	JR	NZ,L_WRVRM@
	LD	B,2	;MSX1 16K
L_WRVRM@:	;
	PUSH	BC
	PUSH	DE
	CALL	VSET_RW
L_WRVRM:	;
	INIR
	DEC	A
	JP	NZ,L_WRVRM
	CALL	D_WRITE
	POP	DE
	POP	BC
	JR	NZ,WRT_VRME	;ERROR
	INC	E
	DJNZ	L_WRVRM@
; (close)
	CALL	F_CLOSE
WRT_VRME:	;
	PUSH	AF
	CALL	RS_VPAGE
	POP	AF
	EI
	RET
;----------- Load VideoRAM File
LOAD_VRM:	;
	CALL	SET_DMA
	LD	A,(GAMVER)
	DEC	A
	JR	Z,READVRM_	;MSX1:H3B=RAM+VRAM
;
; (open)
	LD	HL,EXPVRM	;MSX2:H3V=VRAM (H3M=RAM)
	LD	DE,FCB+9
	LDI
	LDI
	LDI
	CALL	F_OPEN
	JR	NZ,READVRME	;ERROR
; (read)
READVRM_:	;
	LD	DE,4000H	;04000H(WRITE)+00000H(ADR)/200H
	LD	BC,(7)
	INC	C	;C=99H
	LD	B,16	;MSX2 128K
	LD	A,(GAMVER)
	DEC	A
	JR	NZ,L_RDVRM@
	LD	B,2	;MSX1 16K
L_RDVRM@:	;
	PUSH	BC
	PUSH	DE
	CALL	D_READ	;READ FILE 2000H
	POP	DE
	POP	BC
	JR	NZ,READVRME	;ERROR
	PUSH	BC
	CALL	VSET_RW
L_RDVRM:	;
	OTIR
	DEC	A
	JP	NZ,L_RDVRM
	POP	BC
	INC	E
	DJNZ	L_RDVRM@
	XOR	A	;OK
; (close)
READVRME:	;
	PUSH	AF
	CALL	RS_VPAGE
	POP	AF
	EI
	RET
;
;--------------- (sub:VRAM SET)
; C = vdp port#1 no.
; D = 00H (read)
; D = 40H (write)
; E = video address / 200H
VSET_RW:	;
	DI
	LD	A,E
	RRCA
	AND	7
	OUT	(C),A
	LD	A,14+80H
	OUT	(C),A
	XOR	A
	OUT	(C),A
	LD	A,E
	RRCA
	RRCA
	RRCA
	AND	20H
	OR	D
	OUT	(C),A
; (100h * 20h = 2000Hbyte)
	DEC	C	;C=98H
	LD	B,DMASIZ AND 0FFH
	LD	A,DMASIZ >> 8
	LD	HL,DMAADR
	RET
;
;------------ Restore VRAM page
RS_VPAGE:	;
	DI
	LD	A,6
	INC	A
	LD	C,A
	XOR	A
	OUT	(C),A
	LD	A,14+80H
	OUT	(C),A
	RET
;
;---------- CHARACTER CHECK SUM
; A=USR5(Data Address)
;IN:	Data address
;OUT:	(DACINT) = HL = SUM
;USE:	AF,HL,B
CHARSUM@:	;
;
;INT ONLY CALL USRINI
;
	CP	2
	RET	NZ	;NOT INT
	LD	HL,(DACINT)
	XOR	A
	LD	(DACINT+1),A
	CALL	CHAR_SUM
;	LD	(HL),A
	LD	(DACINT),A
	RET
;
;IN:	HL=DATA ADDRESS
;OUT:	A=SUM
;USE:	AF,HL,B
CHAR_SUM:	;
	LD	B,255
	XOR	A
CHRSUM_:	;
	ADD	A,(HL)
	INC	HL
	DJNZ	CHRSUM_
	ADD	A,4AH
	RET
;
;---------- PUSH/POP EDIT-SAVEDATA
; (call befor/after DISK BUFF USING.)
; A=USR6(0) : Move to Evacuation area
; A=USR6(1) : Back from Evacuation area
; IN:	HL - 0=PUSH/1=POP
; OUT:	(EVCFLG) - 1=Evacuation data Exists(Need Back)
CHREEVAC:	;
;
;INT ONLY CALL USRINI
;
	CP	2
	RET	NZ	;NOT INT
;
	CALL	CSL_RAM1
;
	LD	HL,(DACINT)
	LD	A,L
	OR	H
	LD	A,1	;PUSH FLAG
	LD	HL,CHRDTE	;EDIT AREA
	LD	DE,CHREVA	;EVAC AREA
	LD	BC,CHRD4S
	JR	Z,CHREEVAE	;PUSH
	EX	DE,HL	;POP
	XOR	A
CHREEVAE:	;
	LDIR
	LD	(EVCFLG),A
	CALL	CSL_BIOS1
	EI
	RET
;
;----------- FORCED CAMP
; (COPY PLAYNG CHARA to CHARA SAVE DATA)
CAMPCHAR:	;
;
;INT ONLY CALL USRINI
;
	EX	AF,AF'
	LD	A,(RAM0SLT)	;RAM SLOT not INITIALIZED
	OR	A
	RET	Z
	EX	AF,AF'
;
	CP	2
	RET	NZ	;NOT INT
;
	CALL	CSL_RAM0
	LD	A,(CURCHN+DIFRAM)	;D0A4H
	CP	4
	JR	NC,SVCR_E2
	LD	DE,CHRDTE
	ADD	A,D
	LD	D,A
	PUSH	DE
	LD	HL,CURCHD+DIFRAM	;D004H
	LD	B,16
SVCR_:	LD	A,(DE)
	INC	DE
	CP	(HL)
	INC	HL
	JR	NZ,SVCR_E	;NAME IS NOT MATCH
	DJNZ	SVCR_
	POP	DE
	PUSH	DE
	LD	HL,CURCHD+DIFRAM	;D004H
	LD	BC,CHRD1S
	LDIR
	POP	HL
	PUSH	HL
	CALL	CHAR_SUM	;CALC SUM
	LD	(HL),A	;WRITE SUM
	LD	A,(CURCHN+DIFRAM)	;D0A4H
	INC	A
	LD	(DACINT),A
SVCR_E:	POP	HL
SVCR_E2:	;
	CALL	CSL_BIOS0
	EI
	RET
;
;--------------------------------------
	; PAC/FMPAC SRAM
	INCLUDE "PAC-TOOL.ASM" ;*FILE*
;--------------------------------------
;--------------------------------------
	; ENASLT CLONE (FOR PAGE 0 SLOT CHANGE)
	INCLUDE "CHGSLT.ASM" ;*FILE*
;--------------------------------------
;
;-------------------- VDP DATA
;MSX1VDP:	; write 0-7,8-14,23 only / other=skip
;	DB	002H,062H,006H,0FFH,003H,036H,007H,000H
;	DB	028H,000H,000H,000H,000H,000H,000H,000H
;	DB	00FH,000H,000H,000H,000H,03BH,005H,000H
;MSX2VDP:	;
;	DB	00AH,062H,01FH,080H,001H,0F7H,03EH,00FH
;	DB	028H,000H,000H,003H,000H,000H,000H,000H
;	DB	00FH,000H,000H,000H,000H,03BH,005H,000H
;
;-PALETTE (for HYDLIDE3 MSX2 in game fixed color only)
;HD32PAL:	; VDP PALDATA = RB,0G
;       DB	00H,00H, 00H,00H, 00H,00H, 57H,03H
;       DB	00H,00H, 06H,05H, 13H,06H, 70H,05H
;       DB	00H,00H, 00H,00H, 00H,00H, 74H,05H
;       DB	05H,01H, 60H,01H, 77H,07H, 00H,00H
;-PALETTE (for HYDLIDE3 MSX2 : NOON/TOWN)
;HD32PAL:	; VDP PALDATA = RB,0G
;       DB	57H,06H, 45H,05H, 40H,03H, 57H,03H
;       DB	51H,04H, 06H,05H, 13H,06H, 70H,05H
;       DB	13H,05H, 42H,03H, 22H,02H, 74H,05H
;       DB	05H,01H, 60H,01H, 77H,07H, 00H,00H
;

;-------------------- Disk File
FCB:	DB	0
	DB	'FILENAMEEXP'	;*DM*
	DS	37-12
TEMPNAME:	;
	DB	'HYD3TEMPVRM'	;*DM*
EXTMSX1:	;
	DB	'H3B'	;MSX1:RAM+VRAM	;*DM*
EXTMSX2:	;
	DB	'H3M'	;MSX2:RAM	;*DM*
EXPVRM:	DB	'H3V'	;MSX2:VRAM	;*DM*
SYSCAL:	EQU	0F37DH

;-------------------- TEMPORARY INDENTIFIER BUFFER
IDDBUF:	DS	IDDSIZE
;
ENDFL:	;
;
;-> tniASM : SIZE CHECK
IF (ENDFL+STKMIN)>=DMAADR	;STACK CHECK
	#SIZE OVER ERROR
ENDIF
;<-
