;--------------------------------------
; SEARCH KONAMI ROM DATA
;--------------------------------------
; for AILZ80ASM
; https://github.com/AILight/AILZ80ASM/

#pragma once

;--------------------------------------
;USE_SIN10BAI_SEARCH:	EQU	1	;新10倍タイプの検索を使う
;KONAMI_MSX1_ONLY:	EQU	1	;KONAMI MSX1 ソフトのみ
;KONAMI_MSX1_E000: 	EQU	1	;ワークエリアがE000H以上のソフトのみ
;SEARCH_ID_ONLY:	EQU	1	;ID検索のみ行う（スタックポインタ、フック、EIなどを検査しない）
;USE_SCC_SEARCH:	EQU	1	;SCC検索を有効に
;USE_SCC_SEARCH_BAS:	EQU	1	;SCC検索(BASIC用)を有効に
;--------------------------------------

GAME_SLOT:	EQU	ROMSLT

;--------------------------------------
#IF (exists USE_SIN10BAI_SEARCH)
RESULT:
R_GAME_ID:
	DW	0
R_GAME_TITLE:
	DB	0,"                           "	;文字数,27文字
#ENDIF;#IF (exists USE_SIN10BAI_SEARCH)
#IF (exists USE_SIN10BAI_SEARCH) && !(exists SEARCH_ID_ONLY)
GAME_SP_ADR:
	DW	0F0F0H
GAME_MAIN_ADR:
	DW	RET_BAS
GAME_TRAP_ADR:
	DW	0000H
NEED_EI:
	DB	0
GAMEWORK_INIT_SIZE:
	DW	0	;3FFHとか1FFHとか
;--------------------------------------
; JUMP TO GAME HKEYI TRAP
TRAP_MS:
	DB	0C3H	;JP
TRAP_MS_ADR:
	DW	RET_BAS	;RE-WRITE -> GAME_TRAP_ADR
#ENDIF;#IF (exists USE_SIN10BAI_SEARCH) && !(exists SEARCH_ID_ONLY)

;--------------------------------------
; ROM SEARCH FOR BASIC
; (BASIC) A$=USR("")
;	OK:	A$=ゲーム名
;	NG:	A$=空文字列
; (BASIC) A=USR(0)
;	OK:	A=スロット
;	NG:	A=0
SEARCH_ROM_BAS:
	PUSH	DE	;DE=STRING DESCRIPTOR
	PUSH	HL	;HL=DAC
	PUSH	AF	;A=VALTYP

	CALL	SEARCH_ROM

	LD	A,(ROMSLT)
	
	POP	AF	;A=VALTYP
	CP	3	;文字列型
	JR	Z,	SEARCH_ROM_RET_STR

			;文字型以外
	POP	IX	;IX=DAC
	POP	DE	;DE=STRING DESCRIPTOR

	LD	A,2	;整数型に強制
	LD	(VALTYP),A
	LD	A,(ROMSLT)
	LD	(IX+2),A
	LD	(IX+3),0

	RET

SEARCH_ROM_RET_STR:
	POP	HL	;HL=DAC
	POP	IX	;DE=STRING DESCRIPTOR

	LD	A,(R_GAME_TITLE)
	LD	(IX+0),A	;文字数
	LD	HL,R_GAME_TITLE+1
	LD	(IX+1),L	;文字列本体アドレス
	LD	(IX+2),H	;文字列本体アドレス

	RET

;--------------------------------------
GET_SLOT_BAS:
	CP	2	;INTEGER
	RET	NZ
	PUSH	HL
	POP	IX
	LD	A,(ROMSLT)
	LD	(IX+2),A
	LD	(IX+3),0
	RET

GET_GAME_ID_BAS:
	CP	2	;INTEGER
	RET	NZ
	PUSH	HL
	POP	IX
	LD	HL,(R_GAME_ID+0)	;DB 07 XX
	LD	(IX+2),H	;07
	LD	(IX+3),L	;XX
	RET

GET_TITLE_BAS:
	CP	3	;STRIING
	RET	NZ
	PUSH	DE
	POP	IX
	LD	A,(R_GAME_TITLE)
	LD	HL,R_GAME_TITLE+1
	LD	(IX+0),A
	LD	(IX+1),L
	LD	(IX+2),H
	RET

;--------------------------------------
; SEARCH KONAMI ROM (WITH GAME_ID LIST)
; IN:	---
; OUT:	A : (ROMSLT) = FOUND SLOT
;	Z : 0=FOUND / 1=NOT_FOUND
SEARCH_ROM:
	LD	HL,RESULT
	LD	DE,RESULT+1
	LD	BC,KONAMI_ID_ISIZE-1
	LD	(HL),0
	LDIR

	LD	HL,KONAMI_ID_LIST
#IF exists USE_SIN10BAI_SEARCH
	PUSH	HL
	CALL	GET_KONAMI_ID	;ID取得
	POP	HL
	JP	NC,NOT_FOUND_ROM	;見つからない
#ENDIF;IFEXIST USE_SIN10BAI_SEARCH

SEARCH_GAMEID_L:
#IF exists USE_SIN10BAI_SEARCH
	PUSH	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,(GAME_ID)
	RST	DCOMPR	;CALL	CPHLDE
	POP	HL
	JR	Z,SEARCH_ROM_1	;見つかった
#ELSE
	CALL	CHECK_ROM	;ID取得
	JR	Z,SEARCH_ROM_1	;見つかった
#ENDIF
	LD	DE,KONAMI_ID_ISIZE
	ADD	HL,DE
	LD	A,(HL)
	OR	A
	JR	NZ,SEARCH_GAMEID_L
	JP	NOT_FOUND_ROM

SEARCH_ROM_1:
#IF (exists USE_SIN10BAI_SEARCH)
#ELSE
	PUSH	HL

	PUSH	HL
	POP	IX	;IX=HL
	LD	L,(IX+0)
	LD	H,(IX+1)
	LD	(GAME_ID),HL

	POP	HL
#ENDIF;IFEXIST USE_SIN10BAI_SEARCH

	LD	DE,RESULT
	LD	BC,KONAMI_ID_ISIZE
	LDIR

#IF exists SEARCH_ID_ONLY
	JR	ROM_DETECTED
#ELSE;#IF exists SEARCH_ID_ONLY
;スタックポインタを探す
	LD	HL,(4002H)	;HL=BOOT ADDRESS
	CALL	SEARCH_SP
	JR	NC,SEARCH_HOOK
	LD	(GAME_SP_ADR),HL	;FOUND SP

;割り込みフックを探す
SEARCH_HOOK:
	LD	HL,(4002H)	;HL=BOOT ADDRESS
	LD	DE,H_KEYI	;LD (H_KEYI),A	;32 XX XX
	CALL	SEARCH_DE
	JR	Z,FOUND_HOOK
	LD	HL,(4002H)	;HL=BOOT ADDRESS
	LD	DE,H_TIMI	;LD (H_TIMI),A	;32 XX XX
	CALL	SEARCH_DE
FOUND_HOOK:
	LD	B,0
FOUND_HOOK_L:
	LD	A,(HL)
	INC	HL
	CP	21H	; LD HL,XXXX	 ;21 XX XX (3) ;in many cases
	JR	Z,FOUND_HOOK_
	DJNZ	FOUND_HOOK_L
	JR	NOT_FOUND_ROM
FOUND_HOOK_:
	LD	A,(HL)
	LD	(GAME_TRAP_ADR+0),A
	INC	HL
	LD	A,(HL)
	LD	(GAME_TRAP_ADR+1),A
	INC	HL	; LD HL,XXXX	 ;21 XX XX (3) の次のアドレスへ
	LD	A,(HL)	; LD(HKEYI+1),HL ;22 9B FD (3)
	CP	22H
	JR	NZ,NOT_FOUND_ROM
	LD	C,E
	LD	B,D	; BC = H_KEYI or H_TIMI
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	BC	;HKEYI+1
	CALL	CPBCDE	;CP (BC-DE)
	JR	NZ,NOT_FOUND_ROM
	INC	HL	; LD(HKEYI+1),HL ;22 9B FD (3) の次のアドレスへ
	LD	(GAME_MAIN_ADR),HL

;EIがあるか探す
	LD	A,0FBH	;EI
	EX	DE,HL	;DE = (GAME_MAIN_ADR) ゲーム開始アドレス
	DEC	DE	;DE = (GAME_MAIN_ADR) ゲーム開始アドレス-1
	LD	HL,(4002H)
SEARCH_EI_L:
	CP	(HL)
	INC	HL
	JR	Z,FOUND_EI
	CALL	CPHLDE	;Aを壊さない
	JR	C,SEARCH_EI_L
	XOR	A	;A=0 ... EIが無かった
FOUND_EI:
	LD	(NEED_EI),A	;0以外（FB）ならEIがあった

;ワークエリアのクリア処理があるか探す
	LD	HL,(4002H)
	LD	DE,0E000H	;LD HL,0E000H	;21 00 E0
	CALL	SEARCH_DE
	LD	DE,(GAME_MAIN_ADR)
	DEC	DE
	RST	DCOMPR	;CALL	CPHLDE
	JR	NC,NFOUND_GWCLR
				;HL=`LD HL,0E000H`の次のアドレス
	LD	A,01H		;LD BC,XXXX	;01 XX XX
	CP	(HL)
	JR	Z,FOUND_LDBC
	INC	HL
	INC	HL
	INC	HL
	CP	(HL)
	JR	NZ,NFOUND_GWCLR
FOUND_LDBC:
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL	;HL = LD BC,XXXX の XXXX
	JR	FOUND_GWCLR
NFOUND_GWCLR:
	LD	HL,0
FOUND_GWCLR:
	LD	(GAMEWORK_INIT_SIZE),HL

	JR	ROM_DETECTED

;TEST (BC - DE)
; OUT:	Cy = BC < DE
;	Z = BC == DE
; USE:	AF
CPBCDE:
	LD	A,B
	SUB	D
	RET	NZ
	LD	A,C
	SUB	E
	RET
#ENDIF;#IF exists SEARCH_ID_ONLY

NOT_FOUND_ROM:
	LD	HL,0
	LD	(GAME_ID),HL
#IF !(exists SEARCH_ID_ONLY)
	LD	HL,RET_BAS
	LD	(GAME_MAIN_ADR),HL
	LD	HL,0F0F0H
	LD	(GAME_SP_ADR),HL
#ENDIF;#IF !(exists SEARCH_ID_ONLY)
	XOR	A
	LD	(ROMSLT),A

ROM_DETECTED:
	;RESTORE SLOT
	LD	A,(EXPTBL)
	LD	H,40H
	CALL	ENASLT

	LD	A,(ROMSLT)
	OR	A

	RET

;--------------------------------------
; IN:	HL=START ADDRESS
;	(RANGE= IX to IX+255)
;	DE=SEARCH VALUE
; OUT:	C=1:FOUND / 0:NOT FOUND
;	HL=NEXT ADDRESS
SEARCH_DE:
	LD	BC,0100H
SEARCH_DE_L:
	LD	A,E
	CPIR
	JR	NZ,SEARCH_DE_NF	;NOT MATCH
	JP	PO,SEARCH_DE_NF	;BC=0
	LD	A,D
	CP	(HL)
	JR	NZ,SEARCH_DE_L
	;FOUND
	INC	HL
	SCF
	RET	;CY=1
SEARCH_DE_NF:
	OR	A
	RET	;CY=0

;--------------------------------------
; スタックポインタへの代入を探す
; IN:  HL:START ADDRESS
;         (RANGE= HL to HL+255)
; OUT: HL:XXXX
; USE: AF,BC,DE,HL
SEARCH_SP:
	LD	A,31H	; LD SP,HHLL	;31 LL HH
	LD	BC,0100H
SEARCH_SP_L:
	CPIR
	JR	Z,FOUND_LDSP
	OR	A
	RET	;CY=0
FOUND_LDSP:
	PUSH	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	LD	DE,0C001H
	RST	DCOMPR	;CALL	CPHLDE
	JR	C,SEARCH_SP_NX	; HL < 0C001H
	LD	DE,0F381H
	RST	DCOMPR	;CALL	CPHLDE
	JR	NC,SEARCH_SP_NX	; HL > 0F380H
	POP	DE
	SCF
	RET	;CY=1
SEARCH_SP_NX:
	POP	HL
	JR	SEARCH_SP_L


; (Aを使用しないDCOMPRの代替）
; CP HL,DE
; IN:	HL,DE
; USE:	F
CPHLDE:
	OR	A
	SBC	HL,DE
	PUSH	AF
	ADD	HL,DE
	POP	AF
	RET
;--------------------------------------

;--------------------------------------
	INCLUDE "KONALIST.ASM"	;*FILE*
