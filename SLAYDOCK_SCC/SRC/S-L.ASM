;=== SUPER LAYDOCK LOADER ===

	FNAME	"S-L.BIN"	;*BINHEAD*
;--> BIN FILE HEADER -->
	DB	0FEH	;*BINHEAD*
	DW	ORGADR	;*BINHEAD*
	DW	ENDFL-1	;*BINHEAD*
	DW	ORGADR	;*BINHEAD*
;<-- BIN FILE HEADER <--

;====== SLAYDOCK TOOLS COMMON LABELS ======
	INCLUDE "LAY-DEF.ASM"

;====== LAY-HEAD EXPORT ENTRY ;======
	INCLUDE "LAY-HDEF.ASM"

DHEAD:	EQU	_LAYHEAD-4-4000H

ORGADR:	EQU	_OPTION
	ORG	ORGADR

	JP	LOADER	;0
MAIN0_:	JP	MAIN0	;3
MAIN1_:	JP	MAIN1	;6
MAIN2_:	JP	MAIN2	;9
MAIN3_:	JP	MAIN3	;12
MAIN4_:	JP	MAIN4	;15
MAIN5_:	JP	MAIN5	;18
MAIN6_:	JP	MAIN6	;21
INTRP_:	JP	INTRP	;24
; 27
SCCSL_:	DB	SCCSLT	; SCC SLOT SELECT
SCCSL_P:	DB	SCCSLTP	; SCC SLOT PSLOT NO
SCCSL_E:	DB	SCCSLTE	; SCC SLOT ESLOT NO

;=== LOADER START ===
LOADER:	LD	SP,_OPTION
	LD	DE,FCB2	;LAY-HEAD.BIN
	CALL	F_OPEN
	LD	HL,1
	LD	(FCB2+14),HL
	LD	A,7
	LD	(FCB2+33),A
	LD	DE,_LAYHEAD
	CALL	F_DMA
	LD	HL,1000H
	LD	DE,FCB2
	LD	C,_RDRND
	CALL	BDOS

; --- SCC SLOT ---
; ENASLT VALUE
	LD	A,(SCCSL_)
	LD	(SCCSLTA+0),A
; PSLOT VALUE
; LD A,(SCCSLT_)
	RLA	; PAGE1
	RLA	;
	RLA	; PAGE2
	RLA	;
	AND	PG2NMSK
	LD	(SCCSL_P),A
	LD	(SCCSLTA+1),A
; ESLOT VALUE
	LD	A,(SCCSL_)
	AND	PG2NMSK
	LD	(SCCSL_E),A
	LD	(SCCSLTA+2),A
; SLOT DISP
	LD	A,(SCCSL_)
	AND	3
	ADD	A,'0'
	LD	(MESG_SL),A
	LD	A,(SCCSL_)
	RLA
	JR	NC,SCRNINIT
	; DISP EXPAND SLOT
	LD	A,'-'
	LD	(MESG_SL+1),A
	LD	A,(SCCSL_)
	RRA
	RRA
	AND	3
	ADD	A,'0'
	LD	(MESG_SL+2),A
SCRNINIT:

; --- SCREEN ---
; screen0 width42
	LD	A,42
	LD	(0F3AEH),A
	LD	A,0
	CALL	005FH

	LD	DE,MESG_O
	CALL	F_PRINT
	LD	C,7
	CALL	BDOS
;=== READ DATA FILE ===
	LD	DE,FCB	;DATA-FILE
	CALL	F_OPEN

;=== SET SEGMENT to VRAM ===
	LD	DE,8000H
	CALL	F_DMA
	DI
	LD	A,1
	LD	E,0
	CALL	VADR_W
	LD	B,10
	LD	HL,SSGVDAT
L_SSGV:	LD	A,(HL)
	INC	HL
	LD	(FCB+33),A
	PUSH	BC
	PUSH	HL
	LD	DE,FCB
	LD	HL,1
	CALL	F_READ
	LD	HL,8000H
	LD	BC,98H
	LD	A,20H
L_SSV_:	OTIR
	DEC	A
	JP	NZ,L_SSV_
	POP	HL
	POP	BC
	DJNZ	L_SSGV
	CALL	SVLD_E
;=== CAHANGE SLOT to RAM ===
	LD	A,(RAMAD0+1)
	LD	H,40H
	CALL	ENASLT
;=== RESET SEGDAT & RAM ==
MEMINI:	DI
	LD	HL,0
	LD	(SEGDAT+0),HL
	LD	(SEGDAT+2),HL

	LD	A,RAM1
	OUT	(MAP2),A
	LD	DE,8000H
	CALL	F_DMA
	XOR	A
	LD	(FCB+33),A
	LD	HL,1
	LD	DE,FCB
	CALL	F_READ
	DI
;=== RAM TRANSFER ===
	LD	A,RAM0
	OUT	(MAP2),A
	LD	HL,0C000H
	LD	DE,8000H
	LD	BC,4000H
	LDIR
;=== RAM SET ===
	LD	A,RAM0
	OUT	(MAP3),A
	LD	A,RAM2
	OUT	(MAP2),A

	LD	A,(DAIVA_F)
	OR	A
	CALL	Z,DAIVA
	CALL	SCCSET
;=== GAMESTART ===
	LD	A,0C9H
	LD	(H_TIMI),A
	LD	A,0C3H
	LD	(H_KEYI),A
	LD	HL,(INTERV)
	LD	(H_KEYI+1),HL

	LD	HL,(4002H)
	JP	(HL)


;==== BANK HANGE MAIN ====
MAIN0:	LD	HL,SEGDAT+2
	LD	(HL),A
	LD	DE,200H
	LD	C,0FBH	;EI
	CP	2
	JR	Z,_MA0
	LD	DE,400H
	LD	C,0F3H	;DI
_MA0:	LD	A,RAM0
	OUT	(MAP2),A
	LD	HL,(IFF)
	LD	(HL),C
	LD	A,RAM2
	OUT	(MAP2),A
	LD	A,20H
	LD	HL,8000H
	JP	SEGVRM
MAIN1:	LD	HL,SEGDAT+3
	CP	(HL)
	JP	Z,LOADEND
	CALL	SETSEG
	LD	DE,220H
	LD	HL,0A000H
	CP	3+1
	LD	A,20H
	JP	Z,SEGVRM
	EX	DE,HL
	LD	HL,1
	JP	LOAD
MAIN2:	LD	HL,SEGDAT+1
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	DE,120H
	LD	HL,6000H
	LD	A,40H
	JP	SEGVRM
MAIN3:	LD	A,E
MAIN4:	LD	HL,SEGDAT+2
;       LD    D,0
	CP	(HL)
	JP	NZ,MA4_C1
	INC	D
MA4_C1:	CALL	SETSEG
	CP	(HL)
	LD	(HL),A
	JR	NZ,MA4_C2
	DEC	D
	JP	Z,LOADEND
MA4_C2:	LD	HL,8000H
	LD	DE,300H
	CP	10+1
	JP	Z,_MA4
	LD	DE,320H
	CP	11+1
;;      JP    Z,_MA4  ;DANGER in STAGE3
	LD	DE,400H
	CP	12+1
	JP	Z,_MA4
	EX	DE,HL
	LD	HL,2
	JP	LOAD
_MA4:	LD	A,40H
	JP	SEGVRM
MAIN5:	LD	HL,SEGDAT
	CP	(HL)
	JP	Z,LOADEND
	CALL	SETSEG
	LD	HL,4000H
	LD	DE,100H
	CP	0+1
	JP	Z,_MA5
	LD	DE,520H
	CP	31+1
	JP	Z,_MA5
	LD	DE,8000H
	LD	HL,1
	LD	A,RAM1
	OUT	(MAP2),A
	JP	LOAD
_MA5:	LD	A,20H
	JP	SEGVRM
MAIN6:	LD	HL,SEGDAT+1
	CALL	SETSEG
	LD	HL,6000H
	LD	DE,500H
	CP	28+1
	JR	Z,_MA5
	LD	DE,520H
	CP	31+1
	JR	Z,_MA5
	LD	DE,0A000H
	LD	HL,1
	LD	A,RAM1
	OUT	(MAP2),A
	JP	LOAD

SETSEG:	LD	(HL),A
	LD	(FCB+33),A
	INC	A
	INC	HL
	RET
SEGSAVE:	LD	A,RAM0
	OUT	(MAP2),A
	LD	HL,SEGDAT
	LD	DE,DHEAD
	LDI
	LDI
	LDI
	LDI
	LD	A,RAM2
	OUT	(MAP2),A
	RET

SEGVRM:	EX	AF,AF'
	LD	A,D
	CALL	VADR_R
	EX	AF,AF'
	LD	BC,98H
L_SGVRM:	INIR
	DEC	A
	JP	NZ,L_SGVRM
	CALL	SVLD_E
	LD	A,80H
	OUT	(99H),A
	LD	A,23H+40H
	OUT	(99H),A
	JP	LOADEND

LOAD:	PUSH	AF
	LD	A,(H_TIMI)
	LD	(HOOK_BKU+0),A
	LD	A,(H_KEYI)
	LD	(HOOK_BKU+1),A
	POP	AF
	
	PUSH	HL
	CALL	F_DMA
	POP	HL
	LD	DE,FCB
	CALL	F_READ
LOADEND:	;DI
	CALL	SEGSAVE
	CALL	KAIZOU

	PUSH	AF
	LD	A,(HOOK_BKU+0)
	LD	(H_TIMI),A
	LD	A,(HOOK_BKU+1)
	LD	(H_KEYI),A
	POP	AF

	JP	MAP_CR

;=== DATA AREA ===
HOOK_BKU:
	DB	0,0
FCB:	DB	0
	DB	'SLAYDOCKDAT'	;*DM*
	DS	37-12
FCB2:	DB	0
	DB	'LAY-HEADBIN'	;*DM*
	DS	37-12

MESG_O:	DB	CLS
	DB	'===[SUPER LAYDOCK -MISSION STRIKER-]==='	;*DM*
	DB	LF,LF,CR
	DB	'  (C)1987 T&E SOFT (MSX16K 2Mbit ROM)  '	;*DM*
	DB	LF,LF,CR
	DB	'= for DISK /MSX2/2+ 64K MEMORY MAPPER ='	;*DM*
	DB	LF,LF,CR
; DM ' OPTION: SCC_SOUND (insert SLOT 2)     '
	DB	' OPTION: SCC_SOUND (insert SLOT '	;*DM*
MESG_SL:
	DB	30H+SCCSLTN	;'0'+SCCSLTN
	DB	' ',' '
	DB	')   '	;*DM*
	DB	LF,CR
	DB	'         [STOP]  DEBUG-MENU            '	;*DM*
	DB	LF,CR
	DB	'after CHANGE PARAMETER push (CTRL+STOP)'	;*DM*
	DB	LF,LF,CR
	DB	'             HIT ANY KEY'	;*DM*
	DB	ED

SSGVDAT:	DB	0,1,2,3,10,11,12,13,28,31

;=== INCLUDE ===

	INCLUDE	"LAY-OPTI.ASM"	;*FILE*
	INCLUDE	"LAY-SUBR.ASM"	;*FILE*
	INCLUDE	"LAY-SCC.ASM"	;*FILE*
	INCLUDE	"MRG-IN.ASM"	;*FILE*

ENDFL:	;
